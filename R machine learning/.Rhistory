tree_housing<-rpart(data = train_housing_data, d180~. , method = 'class',control = (cp=0.001))
summary(tree_housing)
printcp(tree_housing)
prediction<-predict(tree_housing,newdata =  data.frame(fico=70,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=0,other_services=0))
prediction<-predict(tree_housing,newdata =  data.frame(fico=70,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=as.factor(0),other_services=as.factor(0)))
prediction
penalized_tree_housing<-rpart(data = train_housing_data, d180~current_upb+fico+flag_fthb+cnt_units+occpy_sts+prop_type+cnt_borr+msa+other_services, method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)))
summary(penalized_tree_housing)
printcp(penalized_tree_housing)
plot(penalized_tree_housing, uniform=TRUE, margin = 0.1)
text(penalized_tree_housing)
prp(penalized_tree_housing, extra = 1,box.palette = 'auto')
str(orig_svcg_2005)
orig_svcg_2005$occpy_sts<-factor(orig_svcg_2005$occpy_sts)
orig_svcg_2005$prop_type<-factor(orig_svcg_2005$prop_type)
orig_svcg_2005$cnt_borr<-factor(orig_svcg_2005$cnt_borr)
orig_svcg_2005$flag_fthb<-factor(orig_svcg_2005$flag_fthb)
orig_svcg_2005$msa<-factor(orig_svcg_2005$msa)
orig_svcg_2005$other_services<-factor(orig_svcg_2005$other_services)
orig_svcg_2005$cnt_units<-factor(orig_svcg_2005$cnt_units)
orig_svcg_2005
str(orig_svcg_2005)
set.seed(1)
train_housing_data<-sample_frac(orig_svcg_2005,0.5)
test_housing_data<-setdiff(orig_svcg_2005,train_housing_data)
tree_housing<-rpart(data = train_housing_data, d180~. , method = 'class',control = (cp=0.001))
summary(tree_housing)
printcp(tree_housing)
prediction<-predict(tree_housing,newdata =  data.frame(fico=70,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=as.factor(1),prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=as.factor(0),other_services=as.factor(0)))
prediction
penalized_tree_housing<-rpart(data = train_housing_data, d180~current_upb+fico+flag_fthb+cnt_units+occpy_sts+prop_type+cnt_borr+msa+other_services, method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = (cp=0.001))
summary(penalized_tree_housing)
printcp(penalized_tree_housing)
plot(penalized_tree_housing, uniform=TRUE, margin = 0.1)
text(penalized_tree_housing)
prp(penalized_tree_housing, extra = 1,box.palette = 'auto')
penalized_tree_housing<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = (cp=0.001))
summary(penalized_tree_housing)
printcp(penalized_tree_housing)
plot(penalized_tree_housing, uniform=TRUE, margin = 0.1)
text(penalized_tree_housing)
prp(penalized_tree_housing, extra = 1,box.palette = 'auto')
library(tidyverse)
library(tree)
library(rpart.plot)
# Load data into R workspace
load("orig_svcg_default_2015_Freddie_Mac.Rdata")
# Prepare the data set
orig_svcg_2005 <- orig_svcg_2005 %>%
mutate(msa = ifelse(is.na(cd_msa), 1, 0),
other_services = ifelse(servicer_name == "Other servicers", 1, 0))
orig_svcg_2005$d180 <- factor(orig_svcg_2005$d180)
orig_svcg_2005 <- orig_svcg_2005 %>%
select(-id_loan, -servicer_name, -cd_msa) %>%
filter(complete.cases(.))
orig_svcg_2005
orig_svcg_2005$cnt_borr<-as.factor(orig_svcg_2005$cnt_borr)
orig_svcg_2005
str(orig_svcg_2005)
set.seed(1)
train_housing_data<-sample_frac(orig_svcg_2005,0.5)
test_housing_data<-setdiff(orig_svcg_2005,train_housing_data)
train_housing_data
tree_housing<-rpart(data = train_housing_data, d180~. , method = 'class',control = (cp=0.001))
summary(tree_housing)
printcp(tree_housing)
penalized_tree_housing<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = (cp=0.001))
summary(penalized_tree_housing)
penalized_tree_housing<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),rpart.control = (cp=0.001))
penalized_tree_housing<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = rpart.control(cp=0.001))
summary(penalized_tree_housing)
set.seed(1)
train_housing_data<-sample_frac(orig_svcg_2005,0.5)
test_housing_data<-setdiff(orig_svcg_2005,train_housing_data)
tree_housing<-rpart(data = train_housing_data, d180~. , method = 'class',control = rpart.control(cp=0.001))
summary(tree_housing)
printcp(tree_housing)
prediction<-predict(tree_housing,newdata =  data.frame(fico=70,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=as.factor(1),prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=as.factor(0),other_services=as.factor(0)))
prediction<-predict(tree_housing,newdata =  data.frame(fico=70,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=0,other_services=0))
prediction
penalized_tree_housing<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = rpart.control(cp=0.001))
summary(penalized_tree_housing)
plot(penalized_tree_housing, uniform=TRUE, margin = 0.1)
text(penalized_tree_housing)
prp(penalized_tree_housing, extra = 1,box.palette = 'auto')
penalized_prediction<-predict(penalized_tree_housing,data.frame(fico=70,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=2,msa=0,other_services=0))
penalized_prediction<-predict(penalized_tree_housing,data.frame(fico=70,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=0,other_services=0))
penalized_prediction
printcp(penalized_tree_housing)
plotcp(penalized_tree_housing)
min_index<-which.min(penalized_tree_housing$cptable[,'xerror'])
tree_pruned<-penalized_tree_housing$cptable[min_index,'CP']
tree_pruned
prune_fm<-prune(penalized_tree_housing,cp=tree_pruned)
prp(prune_fm, extra=1,box.palette = 'auto')
min_index<-which.min(penalized_tree_housing$cptable[,'xerror'])
cor_cp<-penalized_tree_housing$cptable[min_index,'CP']
cor_cp
prune_fm<-prune(penalized_tree_housing,cp=cor_cp)
prp(prune_fm, extra=1,box.palette = 'auto')
plot(credit_model)
credit<-read.delim('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Risky Bank Loans/German.csv',sep = "",header = FALSE,col.names = c('Status of existing checking account','Duration in month','Credit history','Purpose','Credit amount','Savings account/bonds','Present employment since','Installment rate in percentage of disposable income','Personal status and sex','Other debtors / guarantors','Present residence since','Property','Age in years','Other installment plans','Housing','Number of existing credits at this bank','job','Number of people being liable to provide maintenance for','telephone','foreign worker','default' ))
credit
# The checking accounts and saving accounts are probably related to default.
credit$Status.of.existing.checking.account<-factor(credit$Status.of.existing.checking.account, levels=c('A11','A12','A13','A14'), labels = c('<0 DM', '1<=  <200DM','>=200DM','unknown'))
credit$Savings.account.bonds<-factor(credit$Savings.account.bonds,levels=c('A61','A62','A63','A64','A65'),labels = c('<100DM','100<= <500DM','500<= <1000DM','>=1000DM','unkoown'))
table(credit$Status.of.existing.checking.account)
table(credit$Savings.account.bonds)
# The loan amounts ranged from 250 DM to 18,420 DM across terms of 4 to 72 months, with a median duration of 18 months and amount of 2,320 DM.
summary(credit$Duration.in.month)
summary(credit$Credit.amount)
# default varaible indicates whether the loan applicant has defaulted.
credit$default<-factor(credit$default,levels=c(1,2),labels=c('no','yes'))
table(credit$default)
set.seed(1019)
train<-sample(1000,900,replace = FALSE)
credit_train<-credit[train,]
credit_test<-credit[-train,]
set.seed(12345)
credit_rand<-credit[order(runif(1000)),]
credit_rand
# make sure that the proportion of 'N'&'Y' are close in both datasets
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
require(C50)
# building the classifier
credit_model<-C5.0(credit_train[,-21],credit_train$default)
credit_model
summary(credit_model)
plot(credit_model)
printcp(credit_model)
plot(credit_model)
plot(credit_model)
if ( is.null(hic.data[[z]]) ) { print("is null")}
C5.0.graphviz(credit_model)
require(C50)
C5.0.graphviz(credit_model)
plot(credit_model,trial = 0,subtree = NULL)
# building the classifier
credit_model<-C5.0(credit_train[,-21],credit_train$default)
credit_model
summary(credit_model)
credit_model
# building the classifier
credit_model<-C5.0(credit_train$default~., data = credit_train)
credit_model
summary(credit_model)
summary(credit_model)
plot(credit_model,trial = 0,subtree = NULL)
plot(credit_model)
download.file('http://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data', destfile = '/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv')
download.file('http://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data', destfile = '/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv')
download.file('http://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.names', destfile = '/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus_names.txt')
mushrooms<-read.csv('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv',header = FALSE, stringsAsFactors = FALSE)
mushrooms
mushrooms<-read.csv('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv',header = FALSE, stringsAsFactors = FALSE,col.names = c('cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'))
mushrooms<-read.csv('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv',header = FALSE, stringsAsFactors = FALSE)
mushrooms
mushrooms<-read.csv('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv',header = FALSE, stringsAsFactors = FALSE,col.names = c('poisonous','cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'))
mushrooms
str(mushrooms)
mushrooms<-read.csv('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv',header = FALSE, stringsAsFactors = TRUE,col.names = c('poisonous','cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'))
mushrooms
str(mushrooms)
# veil type only has one value, it is odd.
mushrooms$veil.type<-NULL
mushrooms
mushrooms<-read.csv('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv',header = FALSE, stringsAsFactors = TRUE,col.names = c('poisonous','cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'))
mushrooms
# veil type only has one value, it is odd.
mushrooms$veil.type<-NULL
mushrooms$poisonous<-factor(mushrooms$poisonous, levels = c('e','p'), labels = c('edible','poisonous'))
mushrooms
mushrooms<-read.csv('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv',header = FALSE, stringsAsFactors = TRUE,col.names = c('type','cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'))
mushrooms
str(mushrooms)
# veil type only has one value, it is odd.
mushrooms$veil.type<-NULL
mushrooms$poisonous<-factor(mushrooms$poisonous, levels = c('e','p'), labels = c('edible','poisonous'))
# veil type only has one value, it is odd.
mushrooms$veil.type<-NULL
mushrooms$type<-factor(mushrooms$type, levels = c('e','p'), labels = c('edible','poisonous'))
mushrooms
# veil type only has one value, it is odd.
mushrooms$veil.type<-NULL
mushrooms$type<-factor(mushrooms$type, levels = c('e','p'), labels = c('edible','poisonous'))
mushrooms
table(mushrooms$type)
mushrooms<-read.csv('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv',header = FALSE, stringsAsFactors = TRUE,col.names = c('type','cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'))
mushrooms
str(mushrooms)
# veil type only has one value, it is odd.
mushrooms$veil.type<-NULL
mushrooms$type<-factor(mushrooms$type, levels = c('e','p'), labels = c('edible','poisonous'))
mushrooms
table(mushrooms$type)
set.seed(1022)
train<-sample(8124,7124)
train_dta<-mushrooms[train,]
test_data<-mushrooms[-train,]
train_data
set.seed(1022)
train<-sample(8124,7124)
train_data<-mushrooms[train,]
test_data<-mushrooms[-train,]
train_data
require(RWeka)
m<-OneR(data=train_data, type~.)
require(RWeka)
require(RWeka)
curve(-x*log2(x)-(1-x)*log2(1-x),xlab='p_1',ylab='Entropy',col='green')
credit<-read.delim('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Risky Bank Loans/German.csv',sep = "",header = FALSE,col.names = c('Status of existing checking account','Duration in month','Credit history','Purpose','Credit amount','Savings account/bonds','Present employment since','Installment rate in percentage of disposable income','Personal status and sex','Other debtors / guarantors','Present residence since','Property','Age in years','Other installment plans','Housing','Number of existing credits at this bank','job','Number of people being liable to provide maintenance for','telephone','foreign worker','default' ))
credit
# The checking accounts and saving accounts are probably related to default.
credit$Status.of.existing.checking.account<-factor(credit$Status.of.existing.checking.account, levels=c('A11','A12','A13','A14'), labels = c('<0 DM', '1<=  <200DM','>=200DM','unknown'))
credit$Savings.account.bonds<-factor(credit$Savings.account.bonds,levels=c('A61','A62','A63','A64','A65'),labels = c('<100DM','100<= <500DM','500<= <1000DM','>=1000DM','unkoown'))
table(credit$Status.of.existing.checking.account)
table(credit$Savings.account.bonds)
# The loan amounts ranged from 250 DM to 18,420 DM across terms of 4 to 72 months, with a median duration of 18 months and amount of 2,320 DM.
summary(credit$Duration.in.month)
summary(credit$Credit.amount)
# default varaible indicates whether the loan applicant has defaulted.
credit$default<-factor(credit$default,levels=c(1,2),labels=c('no','yes'))
table(credit$default)
set.seed(1019)
train<-sample(1000,900,replace = FALSE)
credit_train<-credit[train,]
credit_test<-credit[-train,]
set.seed(12345)
credit_rand<-credit[order(runif(1000)),]
credit_rand
# make sure that the proportion of 'N'&'Y' are close in both datasets
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
require(C50)
# building the classifier
credit_model<-C5.0(credit_train$default~., data = credit_train)
credit_model
summary(credit_model)
# apply the decision tree
credit_pred<-predict(credit_model,credit_test)
require(gmodels)
CrossTable(credit_test$default,credit_pred,prop.chisq = FALSE,prop.r = FALSE,prop.c = FALSE, dnn=c('actual default','predict default'))
# adaptive boosting. This is a process in which many decision trees are built, and the trees vote on the best class for each example.
credit_boost10<-C5.0(credit_train[,-21],credit_train$default,trials = 10)
#summary(credit_boost10)
credit_boost10_pred<-predict(credit_boost10,credit_test)
CrossTable(credit_test$default,credit_boost10_pred,prop.chisq = FALSE,prop.r = FALSE,prop.c = FALSE, dnn=c('actual default','predict default'))
# The penalties are designated in a cost matrix, which speci es how many times more costly each error is, relative to any other. Suppose we believe that a loan default costs the bank three times as much as a missed opportunity. Our cost matrix then could be de ned as:
error_cost<-matrix(c(0,1,3,0),nrow=2)
error_cost
# That is, if misclassify a no as yes cost 1, misclassify a yes as no cost 4
# Then apply to C5.0
credit_cost<-C5.0(credit_train[,-21],credit_train$default,trials = 10,costs = error_cost)
credit_cost_pred<-predict(credit_cost,credit_test)
CrossTable(credit_test$default,credit_cost_pred,prop.chisq = FALSE,prop.r = FALSE,prop.c = FALSE, dnn=c('actual default','predict default'))
mushrooms<-read.csv('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Poisonous Mushrooms/agaricus.csv',header = FALSE, stringsAsFactors = TRUE,col.names = c('type','cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'))
mushrooms
str(mushrooms)
# veil type only has one value, it is odd.
mushrooms$veil.type<-NULL
mushrooms$type<-factor(mushrooms$type, levels = c('e','p'), labels = c('edible','poisonous'))
mushrooms
table(mushrooms$type)
set.seed(1022)
train<-sample(8124,7124)
train_data<-mushrooms[train,]
test_data<-mushrooms[-train,]
train_data
require(RWeka)
m<-OneR(data=train_data, type~.)
install.packages('RWeka')
require(RWeka)
m<-OneR(data=train_data, type~.)
library(RWeka)
library(RWeka)
require(rJava)
library(tidyverse)
library(tree)
library(rpart.plot)
# Load data into R workspace
load("orig_svcg_default_2015_Freddie_Mac.Rdata")
# Prepare the data set
orig_svcg_2005 <- orig_svcg_2005 %>%
mutate(msa = ifelse(is.na(cd_msa), 1, 0),
other_services = ifelse(servicer_name == "Other servicers", 1, 0))
orig_svcg_2005$d180 <- factor(orig_svcg_2005$d180)
orig_svcg_2005 <- orig_svcg_2005 %>%
select(-id_loan, -servicer_name, -cd_msa) %>%
filter(complete.cases(.))
orig_svcg_2005$d180<-factor(orig_svcg_2005$d180,levels = c('0','1'), labels = c('not default','default'))
orig_svcg_2005$cnt_borr<-as.factor(orig_svcg_2005$cnt_borr)
orig_svcg_2005
orig_svcg_2005$d180<-factor(orig_svcg_2005$d180,levels = c('0','1'), labels = c('not default','default'))
orig_svcg_2005$cnt_borr<-as.factor(orig_svcg_2005$cnt_borr)
orig_svcg_2005
library(tidyverse)
library(tree)
library(rpart.plot)
# Load data into R workspace
load("orig_svcg_default_2015_Freddie_Mac.Rdata")
# Prepare the data set
orig_svcg_2005 <- orig_svcg_2005 %>%
mutate(msa = ifelse(is.na(cd_msa), 1, 0),
other_services = ifelse(servicer_name == "Other servicers", 1, 0))
orig_svcg_2005$d180 <- factor(orig_svcg_2005$d180)
orig_svcg_2005 <- orig_svcg_2005 %>%
select(-id_loan, -servicer_name, -cd_msa) %>%
filter(complete.cases(.))
orig_svcg_2005$d180<-factor(orig_svcg_2005$d180,levels = c('0','1'), labels = c('not default','default'))
orig_svcg_2005$cnt_borr<-as.factor(orig_svcg_2005$cnt_borr)
orig_svcg_2005
str(orig_svcg_2005)
set.seed(1)
train_housing_data<-sample_frac(orig_svcg_2005,0.5)
test_housing_data<-setdiff(orig_svcg_2005,train_housing_data)
tree_housing<-rpart(data = train_housing_data, d180~. , method = 'class',control = rpart.control(cp=0.001))
summary(tree_housing)
printcp(tree_housing)
penalized_tree_housing<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = rpart.control(cp=0.001))
summary(penalized_tree_housing)
printcp(penalized_tree_housing)
penalized_tree_housing$variable.importance
plot(penalized_tree_housing, uniform=TRUE, margin = 0.1)
text(penalized_tree_housing)
prp(penalized_tree_housing, extra = 1,box.palette = 'auto')
penalized_tree_housing<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = rpart.control(cp=0.001))
summary(penalized_tree_housing)
printcp(penalized_tree_housing)
penalized_tree_housing$variable.importance
plot(penalized_tree_housing, uniform=TRUE, margin = 0.1)
text(penalized_tree_housing)
prp(penalized_tree_housing, extra = 1,box.palette = 'auto')
penalized_tree_housing$variable.importance
penalized_tree_housing$variable.importance
plot(penalized_tree_housing, uniform=TRUE, margin = 0.1)
text(penalized_tree_housing)
prp(penalized_tree_housing, extra = 1,box.palette = 'auto')
printcp(penalized_tree_housing)
plot(penalized_tree_housing, uniform=TRUE, margin = 0.1)
text(penalized_tree_housing)
prp(penalized_tree_housing, extra = 1,box.palette = 'auto')
penalized_prediction<-predict(penalized_tree_housing,data.frame(fico=70,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=0,other_services=0))
penalized_prediction
penalized_prediction<-predict(penalized_tree_housing,data.frame(fico=700,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=0,other_services=0))
penalized_prediction
min_index<-which.min(penalized_tree_housing$cptable[,'xerror'])
cor_cp<-penalized_tree_housing$cptable[min_index,'CP']
cor_cp
printcp(penalized_tree_housing, trials = 10)
printcp(penalized_tree_housing)
?rpart.control
kfold_penalized_tree<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = rpart.control(cp=0.001, xval = 10))
printcp(kfold_penalized_tree)
kfold_penalized_tree<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = rpart.control(cp=0.001, xval = 10))
printcp(kfold_penalized_tree)
penalized_prediction<-predict(penalized_tree_housing,data.frame(fico=700,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=0,other_services=0))
penalized_prediction
kfold_penalized_tree<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = rpart.control(cp=0.001, xval = 10))
printcp(kfold_penalized_tree)
plotcp(penalized_tree_housing)
min_index<-which.min(penalized_tree_housing$cptable[,'xerror'])
cor_cp<-penalized_tree_housing$cptable[min_index,'CP']
cor_cp
kfold_penalized_tree<-rpart(data = train_housing_data, d180~., method = 'class', parms = list(loss = matrix(c(0, 10, 1, 0), ncol = 2, byrow = FALSE)),control = rpart.control(cp=0.001, xval = 10))
printcp(kfold_penalized_tree)
plotcp(penalized_tree_housing)
min_index<-which.min(penalized_tree_housing$cptable[,'xerror'])
cor_cp<-penalized_tree_housing$cptable[min_index,'CP']
pruned_tree<-prune(penalized_tree_housing,cp=cor_cp)
prp(pruned_tree, extra=1,box.palette = 'auto')
pruned_tree$cptable
pruned_tree$variable.importance
pruned_prediction<-predict(pruned_tree,data.frame(fico=700,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=0,other_services=0))
penalized_prediction
penalized_prediction<-predict(penalized_tree_housing,data.frame(fico=700,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=1,other_services=0))
penalized_prediction
pruned_prediction<-predict(pruned_tree,data.frame(fico=700,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=1,other_services=0))
penalized_prediction
pruned_prediction<-predict(pruned_tree,data.frame(fico=700,current_upb=100000,flag_fthb=as.factor('Y'),occpy_sts=as.factor('O'),cnt_units=1,prop_type=as.factor('SF'),cnt_borr=as.factor(2),msa=0,other_services=0))
penalized_prediction
require(rJava)
require(RWeka)
require(rJava)
require(RWeka)
require(RWeka)
require(RWeka)
install.packages('RWeka')
require(RWeka)
install.packages('rJava')
require(rJava)
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home')
require(rJava)
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home')
Sys.setenv(JAVA_HOME='/Users/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home')
Sys.setenv(JAVA_HOME='/usr/libexec/java_home')
Sys.setenv(JAVA_HOME='/usr/libexec/java_home')
require(rJava)
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home')
require(rJava)
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home')
require(rJava)
setwd("~/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning")
?pairs()
install.packages('psych')
require(psych)
?pairs.panels
tee<-c(1,1,2,2,3,4,5,5,6,6,7,7,7,7)
at1<-c(1,1,2,2,3,4,5,5)
at2<-c(6,6,7,7,7,7)
bt1<-c(1,1,2,2,3,4)
bt2<-c(5,5,6,6,7,7,7,7)
download.file('https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv',destfile = '/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/redwine.csv')
download.file('https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv',destfile = '/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/redwine.csv')
download.file('https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv',destfile = '/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/whitewine.csv')
download.file('https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality.names',destfile = '/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/wine.txt')
redwine<-read.delim('/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Quality of Wine/redwine.csv',delim=';')
redwine<-read.delim(file='/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Quality of Wine/redwine.csv',header=TRUE,sep=';',stringsAsFactors = FALSE)
whitewine<-read.delim(file='/Users/yisongdong/Desktop/MSF&Python/MSF/Big Data Analysis/machine_learning/Quality of Wine/whitewine.csv',header=TRUE,sep=';',stringsAsFactors = FALSE)
redwine
whitewine
str(whitewine)
set.seed(1102)
train<-samples(4898,3750)
require(tidyverse)
require(dplyr)
set.seed(1102)
train<-samples(4898,3750,replace=TRUE)
require(tidyverse)
require(dplyr)
set.seed(1102)
train<-sample(4898,3750,replace=TRUE)
train_data<-whitewine[train,]
test_data<-whitewine[-train,]
train
train<-sample(4898,5000,replace=TRUE)
train<-sample(4898,5000,replace=FALSE)
require(tidyverse)
require(dplyr)
set.seed(1102)
train<-sample(4898,3750,replace=FALSE)
train_data<-whitewine[train,]
test_data<-whitewine[-train,]
test_data
require(tidyverse)
require(dplyr)
set.seed(1102)
train<-sort(sample(4898,3750,replace=FALSE))
train_data<-whitewine[train,]
test_data<-whitewine[-train,]
test_data
require(rpart)
if(!require(rpart)){
install.packages('rpart')
}
?rpart.control
m<-rpart(quality~., data=test_data)
m
require(rpart.plot)
rpart.plot(m)
?rpart.plot
rpart.plot(m,type=0)
rpart.plot(m,type=1)
rpart.plot(m,type=3)
rpart.plot(m,type=3)
rpart.plot(m,type=4)
rpart.plot(m,type=1)
rpart.plot(m,type=1, extra=1)
rpart.plot(m,type=1, extra=0)
rpart.plot(m,type=1, extra=2)
rpart.plot(m,type=1, extra=3)
rpart.plot(m,type=1, extra=4)
rpart.plot(m,type=1, extra=1)
m<-rpart(quality~., data=train_data)
rpart.plot(m,type=1, extra=1)
whinemodel<-rpart(data=train_data,quality~sulphates+alcohol)
rpart.plot(whinemodel)
rpart.plot(whinemodel,type=1,extra=1)
whinemodel<-rpart(data=train_data,quality~sulphates+alcohol)
rpart.plot(whinemodel,type=1,extra=1)
whinemodel<-rpart(data=train_data,quality~sulphates+alcohol)
rpart.plot(whinemodel,type=1,extra=1)
whine_prediction<-predict(whinemodel,test_data)
rpart.plot(whine_prediction)
whine_prediction<-predict(whinemodel,test_data)
rpart.plot(whine_prediction)
whine_prediction<-predict(whinemodel,test_data)
plot(whine_prediction)
whine_prediction
head(whine_prediction)
require(tidyverse)
require(dplyr)
set.seed(1102)
train<-sort(sample(4898,3750,replace=FALSE))
train_data<-whitewine[train,]
test_data<-whitewine[-train,]
if(!require(rpart)){
install.packages('rpart')
}
require(gmodels)
CrossTable(whine_prediction, test_data$quality)
m.rpart<-rpart(quality~., data=train_data)
rpart.plot(m.rpart,type=1, extra=1)
m.rpart<-rpart(quality~., data=train_data)
rpart.plot(m.rpart,type=1, extra=1, digits = 3)
m.rpart<-rpart(quality~., data=train_data)
rpart.plot(m.rpart,type=1, extra=1, digits = 3, fallen.leaves = TRUE)
m.rpart<-rpart(quality~., data=train_data)
rpart.plot(m.rpart,type=1, extra=1, digits = 3, fallen.leaves = FALSE)
p.rpart<-predict(m.rpart,test_data)
CrossTable(p.rpart,test_data$quality)
cor(p.rpart,test_data$quality)
